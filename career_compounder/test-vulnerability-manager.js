const vulnerabilityManager = require('./vulnerability-manager');

// Example code with various vulnerabilities
const testCode = `
// 1. SQL Injection vulnerability (CVE-2021-40438)
app.get('/user', (req, res) => {
  db.query('SELECT * FROM users WHERE id = ' + req.query.id);
});

// 2. XSS vulnerability (CVE-2021-45046)
app.get('/search', (req, res) => {
  const query = req.query.q;
  document.getElementById('results').innerHTML = 'Results for: ' + query;
});

// 3. Command Injection (CVE-2022-0847)
const { exec } = require('child_process');
app.get('/ping', (req, res) => {
  exec('ping -c 4 ' + req.query.host, (error, stdout) => {
    res.send(stdout);
  });
});

// 4. Hardcoded secret
const config = {
  apiKey: '1234567890abcdef1234567890abcdef',
  dbPassword: 's3cr3tp@ss'
};

// 5. Prototype pollution (CVE-2021-23425)
function merge(target, source) {
  for (let key in source) {
    target[key] = source[key];
  }
  return target;
}
`;

console.log('Testing Vulnerability Manager with EPSS Integration');
console.log('=================================================');

vulnerabilityManager.scanCodeWithEPSS(testCode, 'javascript', (err, results) => {
  if (err) {
    console.error('Error:', err);
    return;
  }

  console.log(`\nScan completed at: ${results.timestamp}`);
  console.log(`Language: ${results.language}`);
  console.log(`Total lines scanned: ${results.totalLines}`);
  console.log(`Vulnerabilities found: ${results.vulnerabilities.length}`);
  
  if (results.vulnerabilities.length > 0) {
    console.log('\nVulnerabilities (sorted by EPSS score and severity):');
    console.log('=================================================');
    
    results.vulnerabilities.forEach((vuln, index) => {
      const riskAssessment = vulnerabilityManager.getRiskAssessment(
        vuln.severity, 
        vuln.epssScore
      );
      
      console.log(`\n${index + 1}. ${vuln.type}`);
      console.log('   ' + '='.repeat(vuln.type.length + 3));
      console.log(`   Line ${vuln.line}: ${vuln.description}`);
      console.log(`   Severity: ${vuln.severity}/5`);
      
      if (vuln.epssScore !== undefined) {
        console.log(`   EPSS Score: ${(vuln.epssScore * 100).toFixed(2)}% (${vuln.epssDate})`);
        console.log(`   EPSS Percentile: ${(vuln.epssPercentile * 100).toFixed(2)}%`);
      }
      
      console.log(`   Risk Assessment: ${riskAssessment}`);
      console.log('   Recommendation:', vuln.recommendation);
      console.log('   Code Snippet:', vuln.codeSnippet);
    });
  }
});
