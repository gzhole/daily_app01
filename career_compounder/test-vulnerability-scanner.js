const { scanForVulnerabilities } = require('./security-utils');

// Test code with various vulnerabilities
const testCode = `
// 1. SQL Injection vulnerability
app.get('/user', (req, res) => {
  db.query('SELECT * FROM users WHERE id = ' + req.query.id);
});

// 2. XSS vulnerability
app.get('/search', (req, res) => {
  const query = req.query.q;
  document.getElementById('results').innerHTML = 'Results for: ' + query;
});

// 3. Command Injection
const { exec } = require('child_process');
app.get('/ping', (req, res) => {
  exec('ping -c 4 ' + req.query.host, (error, stdout) => {
    res.send(stdout);
  });
});

// 4. Hardcoded secret
const config = {
  apiKey: '1234567890abcdef1234567890abcdef',
  dbPassword: 's3cr3tp@ss'
};

// 5. Potentially outdated dependency
const express = require('express');
const helmet = require('helmet');
`;

// Run the scanner
console.log('üîç Scanning for vulnerabilities...\n');
const results = scanForVulnerabilities(testCode);

// Display results
if (results.hasVulnerabilities) {
  console.log(`‚ö†Ô∏è  Found ${results.vulnerabilities.length} potential vulnerabilities in ${results.totalLines} lines of code\n`);
  
  results.vulnerabilities.forEach((vuln, index) => {
    console.log(`${index + 1}. [${vuln.type}] ${vuln.description}`);
    console.log(`   Severity: ${'‚ö†Ô∏è'.repeat(vuln.severity)} (${vuln.severity}/5)`);
    console.log(`   Line ${vuln.line}: ${vuln.codeSnippet}`);
    console.log(`   Recommendation: ${vuln.recommendation}\n`);
  });
} else {
  console.log('‚úÖ No vulnerabilities found! Your code looks secure.');
}

console.log(`\nScan completed at ${results.timestamp}`);
